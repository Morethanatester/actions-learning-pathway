name: build-test-deploy-advanced
# Workflow name: Automates building, testing, and deploying an application with advanced configurations.

on:
  push:
    branches:
      - main
    # Triggers the workflow on pushes to the 'main' branch.
  pull_request:
    branches:
      - main
    # Triggers the workflow when a pull request targets the 'main' branch.

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  # Prevents multiple concurrent runs of the same workflow for the same branch or PR.

jobs:
  build:
    if: github.repository == 'morethanatester/actions-learning-pathway'
    # This job runs only if the repository matches the specified one.
    runs-on: ubuntu-latest
    env:
      MY_VARIABLE: "This is not a secret"  # Example public environment variable.

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        # Retrieves the repository code so the workflow can access it.

      - name: Echo Environment Variable
        run: echo "My environment variable is $MY_VARIABLE"
        # Demonstrates usage of environment variables.

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
        # Configures the environment to use Node.js version 18.x.

      - name: Install Dependencies
        run: npm install
        # Installs dependencies required for the build.

      - name: Run Build Script
        run: npm run build
        # Executes the build script to compile the project.

  test:
    if: github.repository == 'morethanatester/actions-learning-pathway'
    # This job runs only if the repository matches the specified one.
    runs-on: ubuntu-latest
    needs: build
    # Depends on the successful completion of the build job.

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test
        env:
          CI: true
        # Ensures tests are run in a CI environment.

  deploy:
    if: github.repository == 'morethanatester/actions-learning-pathway' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    # Deploys only if the repository matches, the branch is 'main', and the event is a push.
    runs-on: ubuntu-latest
    needs: test
    # Depends on the successful completion of the test job.

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Validate Environment
        # Evaluates the correct secret value before proceeding.
        env:
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        run: |
          ENVIRONMENT=${ENVIRONMENT:-"undefined"}  # Set default if the secret is missing.
          echo "ENVIRONMENT value is: '$ENVIRONMENT'"  # Debugging log.
          if [ "$ENVIRONMENT" != "production" ]; then
            echo "ENVIRONMENT is not set to 'production'. Exiting deployment.";
            exit 1;
          fi
          echo "ENVIRONMENT is set to 'production'. Proceeding with deployment."

      - name: Deploy Application
        run: |
          echo "Starting deployment..."
          echo "Copying files to production server..."
          echo "Restarting production services..."
          echo "Deployment complete!"
        # Simulates deployment steps, such as copying files and restarting services.


# Additional Scripting Examples:

# 1. Notification via Slack
# Add a step to send a Slack message using a Slack webhook:
# - name: Notify on Slack
#   run: |
#     curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment to production started!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

# 2. Script for Database Migrations
# Add a step for running database migrations:
# - name: Run Database Migrations
#   run: |
#     ssh user@server 'cd /var/www/html && ./manage.py migrate'
#     echo "Database migrations applied successfully."
